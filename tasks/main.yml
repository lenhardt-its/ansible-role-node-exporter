---
- name: create system group
  group:
    name: "{{ node_exporter_system_group }}"
    system: true
    state: present
  when: node_exporter_system_group != "root"
  become: true
  tags: node_exporter

- name: create system user
  user:
    name: "{{ node_exporter_system_user }}"
    system: true
    shell: "/sbin/nologin"
    group: "{{ node_exporter_system_group }}"
    createhome: false
    groups: "{{ node_exporter_user_additional_groups }}"
    home: /
  when: node_exporter_system_user != "root"
  become: true
  tags: node_exporter

- block:
  - name: check for "/etc/crontab"
    stat:
      path: "/etc/crontab"
    register: __node_exportert_etc_crontab

  - name: assert /etc/crontab exists when using textfile collector scripts
    assert:
      that:
        __node_exportert_etc_crontab.stat.exists

  - name: assert node_exporter_textfile_dir is not empty when using collector scripts
    assert:
      that:
        - node_exporter_textfile_dir | length != 0
  when: node_exporter_textfile_collectors | length != 0

- name: check if node_exporter is installed
  stat:
    path: "/usr/local/bin/node_exporter"
  register: __node_exporter_is_installed
  become: true
  tags: node_exporter

- name: gather currently installed node_exporter version (if any)
  command: "/usr/local/bin/node_exporter --version"
  args:
    warn: false
  changed_when: false
  register: __node_exporter_current_version_output
  when: __node_exporter_is_installed.stat.exists
  become: true
  tags: node_exporter

- block:
  - name: get latest release
    uri:
      url: "https://api.github.com/repos/prometheus/node_exporter/releases/latest"
      method: GET
      return_content: true
      status_code: 200
      body_format: json
      validate_certs: false
      user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
      password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
    environment: "{{proxy_env}}"
    no_log: "{{ not lookup('env', 'MOLECULE_DEBUG') | bool }}"
    register: _latest_release
    until: _latest_release.status == 200
    retries: 5

  - name: "set node_exporter version to {{ _latest_release.json.tag_name[1:] }}"
    set_fact:
      node_exporter_version: "{{ _latest_release.json.tag_name[1:] }}"
  when: node_exporter_version == "latest"
  delegate_to: localhost
  run_once: true
  become: true
  tags: node_exporter

- block:
  - name: get checksum list from github
    set_fact:
      _checksums: "{{ lookup('url', 'https://github.com/prometheus/node_exporter/releases/download/v' + node_exporter_version + '/sha256sums.txt', wantlist=True) | list }}"
    environment: "{{ proxy_env }}"
    run_once: true
    become: true
    tags: node_exporter

  - name: "get checksum for {{ go_arch }} architecture"
    set_fact:
      node_exporter_checksum: "{{ item.split(' ')[0] }}"
    with_items: "{{ _checksums }}"
    when: "('linux-' + go_arch + '.tar.gz') in item"
    become: true
    tags: node_exporter

  - name: download binary to local folder
    get_url:
      url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-{{ go_arch }}.tar.gz"
      dest: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ go_arch }}.tar.gz"
      checksum: "sha256:{{ node_exporter_checksum }}"
    environment: "{{ proxy_env }}"
    register: _download_binary
    until: _download_binary is succeeded
    retries: 5
    delay: 2
    delegate_to: localhost
    check_mode: false
    become: true
    tags: node_exporter

  - name: unpack binary
    unarchive:
      src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ go_arch }}.tar.gz"
      dest: "/tmp"
      creates: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ go_arch }}/node_exporter"
    delegate_to: localhost
    check_mode: false
    become: true
    tags: node_exporter

  - name: propagate binaries
    copy:
      src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ go_arch }}/node_exporter"
      dest: "{{ node_exporter_binary_install_dir }}/node_exporter"
      mode: 0755
      owner: root
      group: root
    notify: restart node_exporter
    when: not ansible_check_mode
    become: true
    tags: node_exporter
  when: (not __node_exporter_is_installed.stat.exists) or (__node_exporter_current_version_output.stdout_lines[0].split(" ")[2] != node_exporter_version)

- name: assert collectors are not both disabled and enabled at the same time
  assert:
    that:
      - "item not in node_exporter_enabled_collectors"
  with_items: "{{ node_exporter_disabled_collectors }}"
  become: true
  tags: node_exporter

- block:
    - name: create config directory
      file:
        path: "{{ node_exporter_config_dir }}"
        state: directory
        owner: root
        group: root
        mode: 0755
      become: true
      tags: node_exporter

    - name: copy config file
      template:
        src: node_exporter.config.yml.j2
        dest: "{{ node_exporter_config_dir }}/config.yml"
        owner: root
        group: root
        mode: 0644
      notify: restart node_exporter
      become: true
      tags: node_exporter
  when:
    ( node_exporter_tls_server_config | length > 0 ) or
    ( node_exporter_http_server_config | length > 0 ) or
    ( node_exporter_basic_auth_users | length > 0 )
  become: true
  tags: node_exporter

- block:
  - name: create textfile collector dir
    file:
      path: "{{ node_exporter_textfile_dir }}"
      state: directory
      owner: "{{ node_exporter_system_user }}"
      group: "{{ node_exporter_system_group }}"
      recurse: true
      mode: u+rwX,g+rwX,o=rX
    tags: node_exporter

  - name: download textfile collector scripts
    copy:
      src: "{{ item.src }}"
      dest: "{{ node_exporter_binary_install_dir }}/textfile_collector_{{ item.src | basename }}"
      owner: root
      group: root
      mode: 0755
    with_items: "{{ node_exporter_textfile_collectors }}"
    tags: node_exporter

  - name: setup textfile collector script systemd cron service
    template:
      src: "cron.service.j2"
      dest: "/etc/systemd/system/textfile-collector-{{ item.src | basename }}.service"
      owner: root
      group: root
      mode: 0644
    with_items: "{{ node_exporter_textfile_collectors }}"
    notify: reload cron
    tags: node_exporter

  - name: setup textfile collector script systemd cron timer
    template:
      src: "cron.timer.j2"
      dest: "/etc/systemd/system/textfile-collector-{{ item.src | basename }}.timer"
      owner: root
      group: root
      mode: 0644
    with_items: "{{ node_exporter_textfile_collectors }}"
    notify: reload cron
    tags: node_exporter

  - name: enable textfile collector
    systemd:
      daemon_reload: true
      name: "textfile-collector-{{ item.src | basename }}.timer"
      enabled: true
      state: started
    with_items: "{{ node_exporter_textfile_collectors }}"
  when: node_exporter_textfile_dir | length > 0
  tags: node_exporter

- name: configure web
  copy:
    content: "{{ node_exporter_webconfig | to_nice_yaml(indent=2) }}"
    dest: "{{ node_exporter_config_dir }}/web.yml"
    force: true
    owner: "{{ node_exporter_system_user }}"
    group: "{{ node_exporter_system_group }}"
    mode: 0644
  notify: reload node_exporter
  when: node_exporter_webconfig | length > 0
  become: true
  tags: node_exporter

- name: create systemd service unit
  template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    owner: root
    group: root
    mode: 0644
  notify: restart node_exporter
  become: true
  tags: node_exporter

- name: start and enable node_exporter
  systemd:
    daemon_reload: true
    name: node_exporter
    enabled: true
    state: started
  become: true
  tags: node_exporter
